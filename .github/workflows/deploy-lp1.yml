name: Deploy LP1 to lp1.cltcomgrana.com.br

on:
  # Manual trigger remains available
  workflow_dispatch:
    inputs:
      build_mode:
        description: "Vite mode (default: production)"
        required: false
        default: "production"
  # Auto-trigger on push to main; job will self-filter LP1 changes
  push:
    branches:
      - main

jobs:
  build-and-deploy-lp1:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect LP1-related changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            lp1:
              - 'src/pages/**/LP1.tsx'
              - 'src/config/variations.ts'
              - 'src/components/HeroSection.tsx'
              - 'src/components/ProblemSection.tsx'
              - 'src/components/StorySection.tsx'
              - 'src/components/SolutionSection.tsx'
              - 'src/components/VideoProofSection.tsx'
              - 'src/components/BenefitsSection.tsx'
              - 'src/components/ForWhoSection.tsx'
              - 'src/components/HowItWorksSection.tsx'
              - 'src/components/TestimonialsSection.tsx'
              - 'src/components/BonusSection.tsx'
              - 'src/components/FAQSection.tsx'
              - 'src/components/GuaranteeSection.tsx'
              - 'src/components/DynamicFinalOfferSection.tsx'
              - 'src/components/BackgroundWrapper.tsx'
              - 'src/components/Footer.tsx'
              - 'src/components/WhatsAppHelpButton.tsx'
              - 'src/hooks/use-clarity.ts'
              - 'src/hooks/use-gtm.ts'
              - '.github/workflows/deploy-lp1.yml'

      - name: Skip if not LP1 changes (unless commit overrides)
        if: steps.changes.outputs.lp1 != 'true' && !contains(github.event.head_commit.message, '[lp1]')
        run: |
          echo "No LP1-specific changes detected and no [lp1] override. Skipping." && exit 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci || npm install --legacy-peer-deps

      - name: Create .env.production for lp1
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        env:
          VITE_DEFAULT_HOME: b/lp1
          VITE_GA_MEASUREMENT_ID: ${{ secrets.LP1_GA_ID }}
          VITE_CLARITY_PROJECT_ID: ${{ secrets.LP1_CLARITY_ID }}
        run: |
          echo "VITE_DEFAULT_HOME=${VITE_DEFAULT_HOME}" > .env.production
          if [ -n "${VITE_GA_MEASUREMENT_ID}" ]; then echo "VITE_GA_MEASUREMENT_ID=${VITE_GA_MEASUREMENT_ID}" >> .env.production; fi
          if [ -n "${VITE_CLARITY_PROJECT_ID}" ]; then echo "VITE_CLARITY_PROJECT_ID=${VITE_CLARITY_PROJECT_ID}" >> .env.production; fi
          echo "Generated .env.production:" && cat .env.production

      - name: Build (Vite)
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        env:
          # Allow overriding mode from manual dispatch
          MODE: ${{ github.event.inputs.build_mode }}
        run: |
          if [ -n "$MODE" ]; then echo "Using Vite mode: $MODE"; fi
          npm run build -- --mode ${MODE:-production}

      - name: Upload dist as artifact
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        uses: actions/upload-artifact@v4
        with:
          name: dist-lp1
          path: dist

      - name: Resolve FTP server (fallback)
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        run: |
          if [ -n "${{ secrets.LP1_FTP_SERVER }}" ]; then
            echo "SERVER=${{ secrets.LP1_FTP_SERVER }}" >> $GITHUB_ENV
            echo "Using LP1_FTP_SERVER"
          else
            echo "SERVER=${{ secrets.FTP_SERVER }}" >> $GITHUB_ENV
            echo "Using default FTP_SERVER"
          fi

      - name: Resolve remote directory (vars or default)
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        run: |
          if [ -n "${{ vars.LP1_REMOTE_DIR }}" ]; then
            echo "REMOTE_DIR=${{ vars.LP1_REMOTE_DIR }}" >> $GITHUB_ENV
            echo "Using vars.LP1_REMOTE_DIR"
          else
            echo "REMOTE_DIR=public_html/lp1/" >> $GITHUB_ENV
            echo "Using default remote dir: public_html/lp1/"
          fi

      - name: Deploy via FTPS (HostGator)
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ env.SERVER }}
          username: ${{ secrets.LP1_FTP_USERNAME }}
          password: ${{ secrets.LP1_FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: dist/
          server-dir: ${{ env.REMOTE_DIR }}
          # Keep .htaccess and robots.txt if present remotely
          exclude: |
            **/.git*
            **/.git*/**
            **/.DS_Store
            **/node_modules/**
          # Logs
          log-level: standard

      - name: Post-deploy check
        if: steps.changes.outputs.lp1 == 'true' || contains(github.event.head_commit.message, '[lp1]')
        run: |
          echo "Deployment finished to ${REMOTE_DIR}." 
          echo "Ensure subdomain lp1.cltcomgrana.com.br points to ${REMOTE_DIR}."