name: Build and Deploy Vite/Next.js App to HostGator via FTP

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Instalar dependências
        run: npm install --legacy-peer-deps

      - name: Instalar react-is (necessário para Recharts)
        run: npm install react-is --legacy-peer-deps

      - name: Configurar variáveis de ambiente de produção (GA4)
        if: ${{ secrets.GA_MEASUREMENT_ID != '' }}
        run: |
          echo "VITE_GA_MEASUREMENT_ID=${{ secrets.GA_MEASUREMENT_ID }}" >> .env.production

      - name: Build do projeto
        run: npm run build


      - name: 🔍 Validar configurações de deploy
        run: |
          echo "🔍 Verificando configurações críticas do deploy..."
          
          # Verificar se server-dir está correto
          if grep -A 10 "Deploy via FTP" .github/workflows/main.yml | grep -q "server-dir: /"; then
            echo "✅ server-dir configurado corretamente: /"
          else
            echo "❌ ERRO CRÍTICO: server-dir não está configurado como '/'"
            echo "   Isso causará problemas no deploy da HostGator!"
            exit 1
          fi
          
          # Verificar se .htaccess não está sendo excluído
          if grep -q "exclude.*\.htaccess" .github/workflows/main.yml; then
            echo "⚠️  AVISO: .htaccess está sendo excluído - pode quebrar roteamento SPA"
          fi
          
          echo "🚀 Validação concluída - deploy seguro para prosseguir!"

      - name: Detectar diretório de build (dist/ ou out/)
        id: detect-dir
        run: |
          if [ -d "dist" ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d "out" ]; then
            echo "BUILD_DIR=out" >> $GITHUB_ENV
          else
            echo "Nenhum diretório de build encontrado (dist/ ou out/)."
            exit 1
          fi

      - name: Injetar server-config da Meta CAPI no build
        if: ${{ env.BUILD_DIR != '' }}
        env:
          META_PIXEL_ID: ${{ secrets.META_PIXEL_ID }}
          META_ACCESS_TOKEN: ${{ secrets.META_ACCESS_TOKEN }}
          META_TEST_EVENT_CODE: ${{ secrets.META_TEST_EVENT_CODE }}
        run: |
          echo "🛠️ Gerando CAPI server-config.php em $BUILD_DIR/capi"
          mkdir -p "$BUILD_DIR/capi"
          cat > "$BUILD_DIR/capi/server-config.php" << EOF
          <?php
          define('META_PIXEL_ID', '${META_PIXEL_ID}');
          define('META_ACCESS_TOKEN', '${META_ACCESS_TOKEN}');
          define('META_TEST_EVENT_CODE', '${META_TEST_EVENT_CODE}');
          EOF
          ls -la "$BUILD_DIR/capi" || true

      # ⚠️  ATENÇÃO CRÍTICA: NÃO ALTERE O server-dir ABAIXO! ⚠️
      # 
      # REGRA DE PROTEÇÃO HOSTGATOR:
      # - server-dir DEVE ser "/" (raiz)
      # - HostGator já usa /public_html/ como diretório público
      # - Alterar para "public_html/" criará /public_html/public_html/ (ERRO!)
      # - Isso tornará o site INACESSÍVEL na URL principal
      # 
      # ✅ CORRETO: server-dir: /
      # ❌ ERRADO:  server-dir: public_html/
      # 
      # Se precisar alterar, TESTE primeiro em ambiente de staging!
      - name: Deploy via FTP para HostGator
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ${{ env.BUILD_DIR }}/
          server-dir: /  # ⚠️ CRÍTICO: Manter como "/" - Ver comentários acima!

      - name: Verificar arquivos no servidor via FTPS
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "🔎 Listando raiz do FTP..."
          curl --ftp-ssl --user "$FTP_USERNAME:$FTP_PASSWORD" "ftp://$FTP_SERVER/" -s || true
          echo "🔎 Listando public_html..."
          curl --ftp-ssl --user "$FTP_USERNAME:$FTP_PASSWORD" "ftp://$FTP_SERVER/public_html/" -s || true
          echo "🔎 Checando .htaccess na public_html..."
          curl --ftp-ssl --user "$FTP_USERNAME:$FTP_PASSWORD" "ftp://$FTP_SERVER/public_html/.htaccess" -s --head | grep -q "Content-Length" && echo "✅ .htaccess encontrado" || echo "⚠️ .htaccess ausente"
          echo "🔎 Checando index.html na public_html..."
          curl --ftp-ssl --user "$FTP_USERNAME:$FTP_PASSWORD" "ftp://$FTP_SERVER/public_html/index.html" -s --head | grep -q "Content-Length" && echo "✅ index.html encontrado" || echo "❌ index.html ausente"
          echo "🔎 Checando assets/js na public_html..."
          curl --ftp-ssl --user "$FTP_USERNAME:$FTP_PASSWORD" "ftp://$FTP_SERVER/public_html/assets/js/" -s | head -n 20 || echo "⚠️ Não foi possível listar assets/js"

      - name: Verificar site por HTTP (opcional)
        env:
          PROD_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          if [ -z "$PROD_URL" ]; then
            echo "ℹ️ PROD_URL não configurado nos secrets; pulando verificação HTTP."
          else
            echo "🔎 Testando $PROD_URL"
            curl -sI "$PROD_URL" | head -n 20
            echo "🔎 Buscando bundles na homepage"
            curl -s "$PROD_URL/index.html" | grep -E "assets/js/.+\\.js" | head -n 5 || echo "⚠️ Não encontrei referência a assets/js"
            echo "🔎 Verificando rota SPA /b/checkout"
            curl -sI "$PROD_URL/b/checkout" | grep -E "HTTP/|Location" | head -n 5
          fi

      - name: Verificar SSL/TLS, redirecionamento e HSTS (opcional)
        env:
          PROD_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          if [ -z "$PROD_URL" ]; then
            echo "ℹ️ PROD_URL não configurado nos secrets; pulando verificação SSL/HSTS."
            exit 0
          fi

          # Extrair host do PROD_URL
          HOST=$(echo "$PROD_URL" | sed -E 's~https?://([^/]+).*~\1~')
          echo "🔎 Host detectado: $HOST"

          echo "\n🔐 Checando HTTPS cabeçalhos"
          curl -sI "https://$HOST" | head -n 20

          echo "\n➡️  Checando redirecionamento HTTP -> HTTPS"
          curl -sI "http://$HOST" | grep -E "HTTP/|Location" | head -n 5 || echo "⚠️ Sem cabeçalhos de redirecionamento detectados"

          echo "\n🛡️  Checando HSTS (Strict-Transport-Security)"
          curl -sI "https://$HOST" | grep -i "Strict-Transport-Security" || echo "⚠️ HSTS não encontrado"

          echo "\n🔧 TLS 1.2 handshake"
          curl -sI --tlsv1.2 "https://$HOST" | grep -E "HTTP/" || echo "⚠️ Falha em TLSv1.2"

          echo "\n🔧 TLS 1.3 handshake (se suportado)"
          curl -sI --tlsv1.3 "https://$HOST" | grep -E "HTTP/" || echo "ℹ️ TLSv1.3 pode não estar habilitado; verifique provedor"

          echo "\n📜 Certificado: validade"
          echo | openssl s_client -servername "$HOST" -connect "$HOST:443" 2>/dev/null | openssl x509 -noout -issuer -subject -dates || echo "⚠️ Não foi possível ler certificado"

          echo "\n🧪 Mixed content (links http) na homepage"
          curl -sL "https://$HOST" | grep -Eo 'http://[^" ]+' | head -n 10 || echo "✅ Sem links http aparentes (parcial)"
